@{ ViewData["Title"] = "Question";
    ViewData["PageName"] = "Question";
    ViewData["PageDescription"] = "Manage HRA Question"; }
@section HeadBlock {
    <link rel="stylesheet" media="screen, print" href="~/css/datagrid/datatables/datatables.bundle.css">
    <link rel="stylesheet" media="screen, print" href="~/css/theme-demo.css">
    <style>
        .modal-content{
            width:800px
        }
    </style>
}
<div class="row">
    <div class="col-xl-12">
        <div id="panel-1" class="panel">
            <div class="panel-hdr">
                <h2>
                    Manage HRA <span class="fw-300"><i>Questions</i></span>
                </h2>
                <div class="panel-toolbar">
                    <button class="btn btn-panel" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"></button>
                    <button class="btn btn-panel" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"></button>
                    <button class="btn btn-panel" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"></button>
                </div>
            </div>
            <div class="panel-container show">
                <div class="panel-content">
                    <div class="tab-content pt-4">
                        <div class="tab-pane fade show active" id="tab_default-1" role="tabpanel">
                            <div class="row">
                                <div class="col-xl-12">
                                    <table id="dt-question" class="table table-bordered table-hover table-striped w-100"></table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section ScriptsBlock {
    <script src="~/js/datagrid/datatables/datatables.bundle.js"></script>
    <script>
	$(document).ready( function () {
        const endpoint ='api/question'
        var columnSet = [
            {
            data: "questionId",
			"visible": false,
			"searchable": false,
			type: "hidden"
		},
            {
                data: "createdBy",
                "visible": false,
                "searchable": false,
                type: "hidden"
			},
            {
                data: "createdDate",
                "visible": false,
                "searchable": false,
                type: "hidden"
			},

		{
            title: "Title",
            data: "questionTitle",
			type: "text",
		},
		{
            title: "Description",
            data: "questionDesc",
			'textarea': "textarea",
			required: true
		},
		{
            title: "Mandatory",
            data: "isMandatory",
			type: "select",
			options: ['Yes', 'No'],
			render: function (data) {
				return data == 1 ?'Yes':'No'
            }
			},
            {
                title: "Active",
                data: "isActive",
                type: "select",
                options: ['Yes', 'No'],
                render: function (data) {
                    return data == 1 ? 'Yes' : 'No'
                }
            },
		{
            title: "Answer Type",
			data: "answerType",
            type: "select",
            options: ['text','date','email','number', 'dropdown','checkbox','radio','password']

		},
		{
            title: "Answer Data Type",
            data: "answerDataType",
            type: "select",
            options: ['string', 'bool', 'password', 'number','email']

		},
		{
            title: "Sequence",
            data: "sequence",
			type: "number",
		},
		{
            title: "Ref Col",
			data: "refCol",
            type: "text",

            }]
       
		/* start data table */
		var dtQuestion = $('#dt-question').dataTable({
			/* check datatable buttons page for more info on how this DOM structure works */
			dom: "<'row mb-3'<'col-sm-12 col-md-6 d-flex align-items-center justify-content-start'f><'col-sm-12 col-md-6 d-flex align-items-center justify-content-end'B>>" +
				"<'row'<'col-sm-12'tr>>" +
				"<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
            ajax: endpoint,
			columns: columnSet,
			select: 'single',
			altEditor: true,
			responsive: true,
			/* buttons uses classes from bootstrap, see buttons page for more details */
			buttons: [
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-times mr-1"></i> Delete',
					name: 'delete',
					className: 'btn-danger btn-sm mr-1'
				},
				{
					extend: 'selected',
					text: '<i class="@(Settings.Theme.IconPrefix) fa-edit mr-1"></i> Edit',
					name: 'edit',
                    className: 'btn-primary btn-sm mr-1 btnEdit',
                    id:'btnEdit'
				},
				{
					text: '<i class="@(Settings.Theme.IconPrefix) fa-plus mr-1"></i> Add',
					name: 'add',
                    className: 'btn-success btn-sm mr-1 btnAdd',
                    id: 'btnAdd'
				},
				{
					text: '<i class="@(Settings.Theme.IconPrefix) fa-sync mr-1"></i> Synchronize',
					name: 'refresh',
					className: 'btn-info btn-sm'
				}
			],
            columnDefs: [

                {
                    type: 'hidden',
                    title:'Action',
                    data: null,
                    targets: 11,
                    render: function (data, type, full, meta) {
                        if (full.answerType == 'dropdown' || full.answerType == 'checkbox' || full.answerType == 'radio') {
                            return '<a href="/AnswerOptions/Index?id=' + full.questionId + '" title="Manage Options"><i class="fal fa-eye" style="font-size: 18px;"></i></a>';
                        }
                        else {
                            return '';
                        }
                    },
                }
            ],
			/* default callback for insertion: mock webservice, always success */
            onAddRow: function (dt, rowdata, success, error) {
                debugger
                rowdata.isMandatory = rowdata.isMandatory == 'Yes' ? true : false
                rowdata.isActive = rowdata.isActive == 'Yes' ? true : false
                $.ajax({
					url: endpoint, type: 'POST', data: rowdata,
                    error: error,
                    success: function (data) {
                        debugger
                        if (data) {
                            ShowNotification('success', 'Question', 'Question created successfully')
                            success(data)
                        }
                        else {
                            ShowNotification('error', 'Question', 'Unable to create question')
                        }
                    }
                });
			},
            onEditRow: function (dt, rowdata, success, error) {
                debugger
                rowdata.isMandatory = rowdata.isMandatory == 'Yes' ? true : false
                rowdata.isActive = rowdata.isActive == 'Yes' ? true : false
				$.ajax({
					url: endpoint, type: 'PUT', data: rowdata,
                    success: function (data) {
                        if (data) {
                            ShowNotification('success', 'Question', 'Question updated successfully')
                            success(data)
                        }
                        else {
                            ShowNotification('error', 'Question', 'Unable to update question')
                        }
                    },
                    error: error
                });
			},
            onDeleteRow: function (dt, rowdata, success, error) {
                rowdata.isMandatory = rowdata.isMandatory == 'Yes' ? true : false
                rowdata.isActive = rowdata.isActive == 'Yes' ? true : false
                $.ajax({
                    url: endpoint, type: 'DELETE', data: rowdata,
                    success: function (data) {
                        if (data) {
                            ShowNotification('success', 'Question', 'Question deleted successfully')
                            success(data)
                        }
                        else {
                            ShowNotification('error', 'Question', 'Unable to delete question')
                        }
                    },
                    error: error
                });
			},
        });
        $('#dt-question_wrapper').on('click', '.btnAdd', function () {
            $('#questionTitle').replaceWith('<textarea id="questionTitle" class="form-control"></textarea>');
            $('#questionDesc').replaceWith('<textarea id="questionDesc" class="form-control"></textarea>');
        })
        $('#dt-question_wrapper').on('click', '.btnEdit', function () {
            debugger
            let question = $(dtQuestion).find('tbody tr.selected td');
            $('#questionTitle').replaceWith('<textarea id="questionTitle" class="form-control">' + question.eq(0).text() + '</textarea>');
            $('#questionDesc').replaceWith('<textarea id="questionDesc" class="form-control">' + question.eq(1).text() + '</textarea>');
            $('#isActive option:contains(' + question.eq(3).text() + ')').attr('selected', 'selected');
                $('#isMandatory option:contains(' +question.eq(2).text()+ ')').attr('selected', 'selected');
        })
    });

    </script>
}
